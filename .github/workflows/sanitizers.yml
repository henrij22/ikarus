name: Ubuntu-GCC-Sanitizers
on: [push]
jobs:
  Ubuntu-GCC-Sanitizers:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
         path: 'repo'
      - name: Create Work Dir
        run: mkdir build
      - name: Install iwyu
        run: |
          sudo apt remove -y "libclang-dev-11"
          sudo apt remove -y "clang-11"
          sudo apt remove -y "llvm-11"
          mkdir -p iwyu
          cd iwyu
          git clone https://github.com/include-what-you-use/include-what-you-use.git
          cd include-what-you-use
          clang --version
          git checkout clang_12
          cd ..
          mkdir -p build && cd build
          cmake -G "Unix Makefiles" -DIWYU_LLVM_ROOT_PATH=/usr/lib/llvm-12 ../include-what-you-use
          make
          sudo make install
          #          sudo apt remove -y "libclang-dev*"
          #          sudo apt remove -y "clang*"
          #          sudo apt remove -y "llvm*"
          #          sudo apt install -y llvm-11-dev
          #          sudo apt install -y libclang-11-dev
          #          sudo apt install -y clang-11
      - name: Install dependencies using apt install
        run: |
          sudo apt install -y gnuplot 
          sudo apt install -y liblapack-dev  
          sudo apt install -y libblas-dev
          sudo apt install -y libsuitesparse-dev
          sudo apt install -y libdune-common-dev
          sudo apt install -y libdune-geometry-dev
          sudo apt install -y libdune-grid-dev
          sudo apt install -y libspdlog-dev
          sudo apt install -y libbenchmark-dev
          sudo apt install -y libgtest-dev
          cd /usr/src/googletest
          sudo cmake .
          sudo cmake --build . --target install
          #sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu/ focal-proposed universe"
          #sudo apt-get update
          #sudo apt-get install -y clang-tools-12 clang-tidy-12
          #sudo cp  /usr/bin/clang-tidy-12 /usr/bin/clang-tidy
          sudo apt-get install -y cppcheck
          sudo apt-get install ninja-build
          #sudo apt-get install g++ git cmake musl-dev python3 coreutils

      - name: Cache matplotplusplusAndEigen
        uses: actions/cache@v2
        id: cache-matplotplusplusEigen
        env:
          cache-name: cache-matplotplusplus
        with:
          path: |
            ./matplotplusplus
            ./eigen
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Conditionally download eigen 3.4
        if: "${{ steps.cache-matplotplusplusEigen.outputs.cache-hit != 'true'}}"
        run: git clone https://gitlab.com/libeigen/eigen.git
      - name: Install eigen 3.4
        run: |
          cd eigen
          git checkout 3.4
          mkdir -p build
          cd build
          cmake ../
          sudo make install
      - name: Install matplotplusplus
        run: |
          mkdir -p matplotplusplus
          cd matplotplusplus
          echo 'cmake_minimum_required(VERSION 3.16)
                project(matplotplusplus)
                include(ExternalProject)
                          ExternalProject_Add(matplotplusplus
                          GIT_REPOSITORY https://github.com/alandefreitas/matplotplusplus.git
                          GIT_TAG master
                          GIT_PROGRESS TRUE
                          CMAKE_ARGS     -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF
                          )' > CMakeLists.txt
          mkdir -p build
          cd build
          cmake ../  -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles"
          sudo cmake --build . --parallel 9
      - name: Install gcc11
        run: |
          sudo apt install build-essential manpages-dev software-properties-common
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update && sudo apt install gcc-11 g++-11
      - name: Build 
       # working-directory: repo 
        run: |
          cd repo
          mkdir cmake-build-debug
          cd cmake-build-debug
          cmake ../  -DUSE_STATIC_ANALYZER=iwyu -DCMAKE_BUILD_TYPE=Debug -G "Unix Makefiles" -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-11 -DUSE_SANITIZER="Address;Memory;MemoryWithOrigins;Undefined;Thread;Leak;Address;Undefined"
          cmake --build . --parallel 9 --target IkarusTests
      - name: Tests
        working-directory: ./repo/cmake-build-release
        run: ctest --output-on-failure --parallel 4 -C Debug

